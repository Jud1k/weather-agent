import os
import asyncio
from dotenv import load_dotenv
from fastmcp import Client

load_dotenv()

client = Client(os.getenv("MCP_URL"))


async def test_weather_server():
    async with client:
        try:
            # Basic server interaction
            await client.ping()
            print("‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!\n")

            # List available operations
            tools = await client.list_tools()
            resources = await client.list_resources()
            prompts = await client.list_prompts()

            print(f"üìã –î–æ—Å—Ç—É–ø–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tools)}")
            for tool in tools:
                print(f"  ‚Ä¢ {tool.name}")

            print(f"\nüìö –î–æ—Å—Ç—É–ø–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤: {len(resources)}")
            for resource in resources:
                print(f"  ‚Ä¢ {resource.uri}")

            print(f"\nüí≠ –î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–æ–º–ø—Ç–æ–≤: {len(prompts)}")
            for prompt in prompts:
                print(f"  ‚Ä¢ {prompt.name}")

            # 1. Test fetch weather of Moscow
            result = await client.call_tool("get_weather", {"city_name": "Moscow"})
            data = result.content[0].text
            print(data)

            print("\nüéâ All test completed!")
        except Exception as e:
            print(f"Error while runnig tests: {e}")


if __name__ == "__main__":
    asyncio.run(test_weather_server())
